package main

import (
	"duov6.com/objectstore/goclient"
)

func main() {

	object := make(map[string]interface{})
	object["id"] = "1134"
	object["field1"] = "Value"

	settings := make(map[string]interface{})
	settings["DB_Type"] = "ELASTIC"
	settings["Host"] = "localhost"
	settings["Port"] = "9200"

	client.GoSmoothFlow("token", "com.duosoftware.customer", "account", settings).StoreObject().WithKeyField("id").AndStoreOne(tmp).Ok()
}





//........................................................

func getServerConfigs(params map[string]interface{}) map[string]map[string]string {
	config := make(map[string]map[string]string)

	db_type := params["DB_Type"].(string)

	if strings.EqualFold(db_type, "mysql") || strings.EqualFold(db_type, "cloudsql") {
		settings := make(map[string]string)
		settings["Username"] = params["Username"].(string)
		settings["Password"] = params["Password"].(string)
		settings["Url"] = params["Url"].(string)
		settings["Port"] = params["Port"].(string)
		config["MYSQL"] = settings
	} else if strings.EqualFold(db_type, "CASSANDRA") {
		settings := make(map[string]string)
		settings["Url"] = params["Url"].(string)
		config["CASSANDRA"] = settings
	} else if strings.EqualFold(db_type, "ELASTIC") {
		settings := make(map[string]string)
		settings["Host"] = params["Host"].(string)
		settings["Port"] = params["Port"].(string)
		config["ELASTIC"] = settings
	} else if strings.EqualFold(db_type, "COUCH") {
		settings := make(map[string]string)
		settings["Url"] = params["Url"].(string)
		settings["Bucket"] = params["Bucket"].(string)
		config["COUCH"] = settings
	} else if strings.EqualFold(db_type, "GoogleBigTable") {
		settings := make(map[string]string)
		settings["type"] = params["type"].(string)
		settings["private_key_id"] = params["private_key_id"].(string)
		settings["private_key"] = params["private_key"].(string)
		settings["client_email"] = params["client_email"].(string)
		settings["client_id"] = params["client_id"].(string)
		settings["auth_uri"] = params["auth_uri"].(string)
		settings["token_uri"] = params["token_uri"].(string)
		settings["auth_provider_x509_cert_url"] = params["auth_provider_x509_cert_url"].(string)
		settings["client_x509_cert_url"] = params["client_x509_cert_url"].(string)
		config["GoogleBigTable"] = settings
	} else if strings.EqualFold(db_type, "GoogleDataStore") {
		settings := make(map[string]string)
		settings["type"] = params["type"].(string)
		settings["private_key_id"] = params["private_key_id"].(string)
		settings["private_key"] = params["private_key"].(string)
		settings["client_email"] = params["client_email"].(string)
		settings["client_id"] = params["client_id"].(string)
		settings["auth_uri"] = params["auth_uri"].(string)
		settings["token_uri"] = params["token_uri"].(string)
		settings["auth_provider_x509_cert_url"] = params["auth_provider_x509_cert_url"].(string)
		settings["client_x509_cert_url"] = params["client_x509_cert_url"].(string)
		config["GoogleDataStore"] = settings
	} else if strings.EqualFold(db_type, "HIVE") {
		settings := make(map[string]string)
		settings["Host"] = params["Host"].(string)
		settings["Port"] = params["Port"].(string)
		config["HIVE"] = settings
	} else if strings.EqualFold(db_type, "MSSQL") {
		settings := make(map[string]string)
		settings["Username"] = params["Username"].(string)
		settings["Password"] = params["Password"].(string)
		settings["Server"] = params["Server"].(string)
		settings["Port"] = params["Port"].(string)
		config["MSSQL"] = settings
	} else if strings.EqualFold(db_type, "MONGO") {
		settings := make(map[string]string)
		settings["Url"] = params["Url"].(string)
		config["MONGO"] = settings
	} else if strings.EqualFold(db_type, "POSTGRES") {
		settings := make(map[string]string)
		settings["Username"] = params["Username"].(string)
		settings["Password"] = params["Password"].(string)
		settings["Url"] = params["Url"].(string)
		settings["Port"] = params["Port"].(string)
		config["POSTGRES"] = settings
	} else if strings.EqualFold(db_type, "REDIS") {
		settings := make(map[string]string)
		settings["Host"] = params["Host"].(string)
		settings["Port"] = params["Port"].(string)
		config["REDIS"] = settings
	}

	return config
}


------------------------------------------------------------------------------


GET-ALL
-------
bytes, err := client.GoSmoothFlow("token", "com.duosoftware.customer", "account").GetMany().All().Ok()

GET-BY-KEY
----------
bytes, err := client.GoSmoothFlow("securityToken", "namespace", "class").GetOne().ByUniqueKey("primaryKeyFieldValue").Ok()

INSERT-SINGLE
-------------
err := client.GoSmoothFlow("securityToken", "namespace", "class").StoreObject().WithKeyField("primaryKeyFieldName").AndStoreOne(Object).Ok()

INSERT-MULTIPLE
---------------
err := client.GoSmoothFlow("securityToken", "namespace", "class").StoreObject().WithKeyField("primaryKeyFieldName").AndStoreMany([]Object).Ok()

DELETE-SINGLE
-------------
err := client.GoSmoothFlow("securityToken", "namespace", "class").DeleteObject().WithKeyField("primaryKeyFieldName").AndDeleteOne(Object).Ok()

DELETE-MULTIPLE
---------------
err := client.GoSmoothFlow("securityToken", "namespace", "class").DeleteObject().WithKeyField("primaryKeyFieldName").AndDeleteMany([]Object).Ok()

QUERY
-----
bytes, err := client.GoSmoothFlow("token", "com.duosoftware.customer", "account").GetMany().ByQuerying("query").Ok()